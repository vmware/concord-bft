# Concord
#
# Copyright (c) 2020 VMware, Inc. All Rights Reserved.
#
# This product is licensed to you under the Apache 2.0 license (the "License").
# You may not use this product except in compliance with the Apache 2.0 License.
#
# This product may include a number of subcomponents with separate copyright
# notices and license terms. Your use of these subcomponents is subject to the
# terms and conditions of the subcomponent's license, as noted in the LICENSE
# file.

import os
from exceptions import CmfParseError
from cpp.cpp_visitor import CppVisitor
from walker import Walker

def copyright():
    return """// Concord
//
// Copyright (c) 2020 VMware, Inc. All Rights Reserved.
//
// This product is licensed to you under the Apache 2.0 license (the "License").
// You may not use this product except in compliance with the Apache 2.0 License.
//
// This product may include a number of subcomponents with separate copyright
// notices and license terms. Your use of these subcomponents is subject to the
// terms and conditions of the sub-component's license, as noted in the
// LICENSE file.

/***************************************
 Autogenerated by cmfc. Do not modify.
***************************************/
"""

def header_guard(header_file):
    name = "__CMF__{}__".format(header_file.replace('.', '_').upper())
    return f"""
#ifndef {name}
#define {name}
"""

def header_guard_trailer(header_file):
    name = "__CMF__{}__".format(header_file.replace('.', '_').upper())
    return f"""
#endif // {name}
"""

def header_includes():
    """C++ header needed by generated code

    The generated serialize/deserialize function declarations and struct
    definitions make use of C++ types
    """
    return """
#include <cstdint>
#include <map>
#include <optional>
#include <string>
#include <utility>
#include <variant>
#include <vector>
"""

def include_header(header):
    return f"""
#include "{header}"
"""


def file_namespace(namespace):
    if namespace:
        return f"namespace {namespace} {{\n"
    return ''


def file_trailer(namespace):
    if namespace:
        return f"}} // namespace {namespace}\n"
    return "\n"


def translate(ast, output_header, namespace=None):
    """
    Walk concord message format(CMF) AST and generate C++ code.

    Return C++ code as a string.
    """
    with open(os.path.join(os.path.dirname(__file__), "serialize.hpp")) as f:
        cmf_base_header = f.read()
    with open(os.path.join(os.path.dirname(__file__), "serialize.cpp")) as f:
        cmf_base_serialization = f.read()
    visitor = CppVisitor()
    walker = Walker(ast, visitor)
    walker.walk()

    impl = copyright() \
           + include_header(output_header) + '\n' \
           + cmf_base_serialization + '\n' \
           + file_namespace(namespace) + '\n' \
           + visitor.output \
           + file_trailer(namespace)

    header = copyright() \
             + header_guard(output_header) \
             + header_includes() + '\n' \
             + cmf_base_header + '\n' \
             + file_namespace(namespace) \
             + visitor.output_declaration + '\n' \
             + file_trailer(namespace) \
             + header_guard_trailer(output_header)

    return header, impl
