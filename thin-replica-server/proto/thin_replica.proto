// Concord
//
// Copyright (c) 2021 VMware, Inc. All Rights Reserved.
//
// This product is licensed to you under the Apache 2.0 license (the "License").
// You may not use this product except in compliance with the Apache 2.0
// License.
//
// This product may include a number of subcomponents with separate copyright
// notices and license terms. Your use of these subcomponents is subject to the
// terms and conditions of the subcomponent's license, as noted in the LICENSE
// file.
//
// Thin Replica Protocol
// Provides a service to subscribe to updates on the KV-Blockchain.
//
// Note: Updates are not blocks but KV-pairs that belong to the blockchain.
//

syntax = "proto3";
package com.vmware.concord.thin_replica;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service ThinReplica {
  // Finite stream which sends the current state that is visible to the Thin Replica client
  rpc ReadState(ReadStateRequest) returns (stream Data);

  // Return the hash of the state at a given block id
  rpc ReadStateHash(ReadStateHashRequest) returns (Hash);

  // An endless stream of updates
  // The client needs to acknowledge the received updates (AckUpdate) in order to help the server manage data growth
  rpc SubscribeToUpdates(SubscriptionRequest) returns (stream Data);

  // The client acknowledges the receipt of updates based on the given block id
  rpc AckUpdate(BlockId) returns (google.protobuf.Empty);

  // An endless stream of hashes of updates
  // The client can use those hashes to verify the integrity of the data from the other stream
  rpc SubscribeToUpdateHashes(SubscriptionRequest) returns (stream Hash);

  // Cancel the stream gracefully
  // The server will forget the acknowledgements, meaning data can be pruned
  // Note: At any given point in time, the client should have only _one_ stream per server open
  rpc Unsubscribe(google.protobuf.Empty) returns (google.protobuf.Empty);
}

message ReadStateRequest {}

message ReadStateHashRequest {
  oneof request {
    EventsRequest events = 1;
    EventGroupsRequest event_groups = 2;
  }
}

message SubscriptionRequest {
  oneof request {
    EventsRequest events = 1;
    EventGroupsRequest event_groups = 2;
  }
}

message EventsRequest {
  // Subscribe from (including) the given block id
  uint64 block_id = 1;
}

message BlockId {
  uint64 block_id = 1;
  // TODO: signature
}

message Data {
  oneof data {
    Events events = 1;
    EventGroup event_group = 2;
  }
}

message Events {
  // The data was found in this block
  uint64 block_id = 1;
  repeated KVPair data = 2;
  string correlation_id = 3;
  bytes span_context = 4;
}

message KVPair {
  bytes key = 1;
  bytes value = 2;
}

message Hash {
  oneof hash {
    EventsHash events = 1;
    EventGroupHash event_group = 2;
  }
}

message EventsHash {
  uint64 block_id = 1;
  bytes hash = 2;
}

message EventGroupHash {
  uint64 event_group_id = 1;
  bytes hash = 2;
}

// Trace contexts are serialized as the below message in Updates sent to clients.
message W3cTraceContext {
  map<string, string> key_values = 1;
}

// See clientservice.proto for documentation on EventGroups.
// Note: We don't want to depend on clientservice.proto because any change to
// clientservice.proto would result in a change for the TRS and therefore the
// replica itself. By keeping them separate we will have an easier time
// changing/maintaining those two interfaces.
message EventGroupsRequest {
  uint64 event_group_id = 1;
}
message EventGroup {
  uint64 id = 1;
  repeated bytes events = 2;
  google.protobuf.Timestamp record_time = 3;
  map<string, string> trace_context = 4;
}
