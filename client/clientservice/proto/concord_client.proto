// Copyright 2021 VMware, all rights reserved
//
// Concord Client gRPC service

syntax = "proto3";
package vmware.concord.client.v1;

// Specifies Java package name, using the standard prefix "com."
option java_package = "com.vmware.concord.client.v1";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// Service error handling
// Each service method will return a gRPC status object.
// All errors are mapped to the common gRPC error codes defined here: https://grpc.github.io/grpc/core/md_doc_statuscodes.html
// See each method for concrete explanations below.

// The RequestService allows the caller to submit requests to the blockchain
// network, and receive the result of the request in a synchronous response.
//
// You can use the EventService below for asynchronously consuming the
// events of submitted requests.
service RequestService {
  // Send a single request via the Concord Client to the blockchain network.
  // Errors:
  // DEADLINE_EXCEEDED: if the request couldn't be processed before the given timeout expired.
  // INVALID_ARGUMENT: if a required field is not set.
  // RESOURCE_EXHAUSTED: if Concord Client is overloaded. The caller should retry with a backoff.
  // UNAVAILABLE: if Concord Client is currently unable to process any requests. The caller should retry with a backoff.
  // INTERNAL: if Concord Client cannot progress independent of the request.
  rpc Send(Request) returns (Response);
}

message Request {
  // Required application request which gets evaluated by the execution engine.
  bytes request = 1;

  // Required timeout which defines the maximum amount of time the caller is
  // willing to wait for the request to be processed by a quorum of replicas.
  // Returns DEADLINE_EXCEEDED if the request times out.
  // Returns INVALID_ARGUMENT if the timeout is zero.
  google.protobuf.Duration timeout = 2;

  // Optional flag to mark the request as read-only.
  // A read-only request doesn't go through consensus.
  // Concord Client makes sure it receives matching replies from a quorum of replicas.
  // `read_only` and `pre_execute` are mutually exclusive.
  // INVALID_ARGUMENT if read_only and pre_execute are set.
  optional bool read_only = 3;

  // Optional flag to enable request pre-execution.
  // Pre-execution evaluates the request before consensus as opposed to after.
  // If pre-execution is successful and no conflicts are detected during the
  // execution phase then consensus will speed up for all requests in the system.
  // `read_only` and `pre_execute` are mutually exclusive.
  // INVALID_ARGUMENT if `read_only` and `pre_execute` are set.
  optional bool pre_execute = 4;

  // Optional request identifier. At runtime, Concord Client maps the
  // `correlation_id` to a sequence number which can be used to track the request
  // in log messages in the blockchain network.
  optional string correlation_id = 5;
}

message Response {
  // Application data returned by the execution engine.
  bytes response = 1;
}

// The EventService can be used to read old events and listen for new ones.
// Concord Client queries a quorum of replicas to validate those events.
// The replicas will filter and deliver all events in EventGroups in the order they were created.
// Concord Client will continuously try to get new EventGroups once the subscription has been established.
// If the user encounters errors then it is recommended to check the service's health via
// gRPC's health check API or re-subscribe with exponential back-off to its last known event id.
// https://github.com/grpc/grpc/blob/master/doc/health-checking.md
service EventService {
  // Subscribe to a continuous stream of EventGroups from the blockchain.
  // Note: Only one stream can be active at a time (will change in the future).
  // The active stream has to be cancelled fist before a new stream can be established.
  // Errors:
  // OUT_OF_RANGE: if the requested starting EventGroup is not available yet.
  // NOT_FOUND: if the requested starting EventGroup was pruned.
  // RESOURCE_EXHAUSTED: if Concord Client is overloaded. The caller should retry with a backoff.
  // UNAVAILABLE: if Concord Client is currently unable to process any requests. The caller should retry with a backoff.
  // INTERNAL: if Concord Client cannot progress independent of the request.
  // ALREADY_EXISTS: if Concord Client serves an active stream already. See note above.
  rpc StreamEventGroups(StreamEventGroupsRequest) returns (stream EventGroup);
}

message StreamEventGroupsRequest {
  // Start the continous stream at EventGroup `event_group_id`.
  uint64 event_group_id = 1;
}

// The execution engine will generate one or multiple events per single Request from the RequestService.
// In addition, the execution engine decides which Concord Client is allowed to see which event.
// The replicas filter the events and hence the Concord Client might receive a subset of all events.
// All events are accumulated into EventGroups.
// Each EventGroup contains all visible events for a single Request execution and is marked with an identifier.
// EventGroups without any visible events are not sent to Concord Client.
// The EventGroup id indicates the order of events' generation.
// Therefore, the order of EventGroups mirror the order of request executions visible to Concord Client.
message EventGroup {
  // Sequentially increasing identifier which is unique to all Concord Clients with the same Concord Client id.
  // The very first EventGroup is marked with EventGroup id 0.
  uint64 id = 1;

  // The events visible to the client in the order produced by the execution engine.
  repeated bytes events = 2;

  // Timestamp for when the request execution result was included in the blockchain.
  google.protobuf.Timestamp record_time = 3;

  // Optional trace data in `trace_context`.
  // Trace information will be provided if the event was created after the subscription stream was established.
  // The trace context is compliant with the W3C Trace Context specification:
  // https://www.w3.org/TR/trace-context/#trace-context-http-headers-format
  // Note: Trace contexts can be transferred via gRPC metadata but are per-RPC only.
  // https://grpc.io/docs/what-is-grpc/core-concepts/#metadata
  map<string, string> trace_context = 4;
}
