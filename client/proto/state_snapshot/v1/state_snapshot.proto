// Copyright 2021 VMware, all rights reserved
//
// Concord Client's StateSnapshot Service

syntax = "proto3";
package vmware.concord.client.statesnapshot.v1;

option java_package = "com.vmware.concord.client.statesnapshot.v1";

// The StateSnapshot service can be used to initialize an Application from a state
// snapshot visible to Concord Client. A state snapshot contains all key-values
// in the `STORAGE_SPACE_MERKLE` storage space from the start of the blockchain up
// to a specific point and is identified by a snapshot ID.
//
// A state snapshot contains only the last writes (as of the state snapshot itself)
// to key-values in the `STORAGE_SPACE_MERKLE` storage space and no prior historical
// writes.
//
// See `execution_engine.proto` for more information about storage spaces.
service StateSnapshot {
  // Get the ID of a recent and available state snapshot.
  // Errors:
  // UNAVAILABLE: if Concord Client is not ready yet to process requests.
  // UNKNOWN: exact cause is unknown.
  rpc GetRecentSnapshot(GetRecentSnapshotRequest) returns (GetRecentSnapshotResponse);

  // Stream a specific state snapshot in a resumable fashion as a finite stream of key-values.
  // Key-values are streamed with lexicographic order on keys.
  // Errors:
  // NOT_FOUND: if a state snapshot with the requested ID is not (or no longer) available.
  //            Applications are advised to retry initialization by fetching a new snapshot ID.
  // INVALID_ARGUMENT: if resuming a stream using `from_key` and that key is not part of the
  //                   state snapshot.
  // UNAVAILABLE: if Concord Client is not ready yet to process requests.
  // UNKNOWN: exact cause is unknown.
  rpc StreamSnapshot(StreamSnapshotRequest) returns (stream StreamSnapshotResponse);

  // Read the values of the given keys as of a specific state snapshot.
  // Errors:
  // NOT_FOUND: if the state snapshot with the requested ID is not (or no longer) available.
  //            Applications are advised to retry initialization by fetching a new snapshot ID.
  // UNAVAILABLE: if Concord Client is not ready yet to process requests.
  // UNKNOWN: exact cause is unknown.
  rpc ReadAsOf(ReadAsOfRequest) returns (ReadAsOfResponse);
}

message GetRecentSnapshotRequest {
}

message GetRecentSnapshotResponse {
  // Mandatory field.
  //
  // The ID of a recent and available state snapshot.
  uint64 snapshot_id = 1;

  // Mandatory field.
  //
  // The event group ID at which the state snapshot with `snapshot_id` was taken.
  //
  // The event group ID can be used in the `EventService` to subscribe to events
  // that were created after the snapshot was taken.
  // Note: Events and, consequently, the `EventService` are optional. The execution
  // engine might not generate any events. In that case, the event group ID will be 0.
  //
  // To visualize, we show how events are streamed from Concord Client to the
  // Application and the relation between state snapshot and event group IDs:
  // -----------------------------------------------------------------------------
  //                               [State Snapshot at evgN]
  //                                          |
  //                                          v
  // ------------------                                            ---------------
  // | Concord Client |  -- evg1, evg2, ..., evgN, evgN+1, ... ->  | Application |
  // ------------------                                            ---------------
  // -----------------------------------------------------------------------------
  // where `evgN` is the Nth event group streamed from Concord Client to the Application.
  // After receiving a state snapshot at `evgN`, an Application can continue operation by
  // consuming event groups from `evgN+1` onwards.
  //
  // Concord Client ensures that there is always at least one reasonably recent
  // state snapshot that can be served. The intention is that this state snapshot
  // can be used to initialize the Application after the blockchain has been pruned and
  // some set of historical events are no longer available via the `EventService`.
  //
  // See `event.proto` for more information about events, event group IDs and
  // `EventService`.
  //
  // Note: The StateSnapshot service only supports state snapshots based on event
  // group IDs and not legacy events that are based on block IDs.
  uint64 event_group_id = 2;

  // Mandatory field.
  //
  // An estimate (with reasonable accuracy) of the count of key-values contained
  // in the state snapshot. Please note that this is an estimation and *not* the
  // actual count.
  uint64 key_value_count_estimate = 3;
}

message StreamSnapshotRequest {  
  // Mandatory field.
  //
  // The ID of the state snapshot to be streamed.
  uint64 snapshot_id = 1;

  // Optional field.
  //
  // If set, start streaming from `last_received_key` onwards, excluding
  // `last_received_key`.
  // If `last_received_key` is not part of the state snapshot, an INVALID_ARGUMENT
  // error is returned.
  //
  // If not set, start streaming from the first key-value in the state snapshot.
  //
  // The empty bytestring is a valid key.
  //
  // Key-values are streamed with lexicographic order on keys.
  optional bytes last_received_key = 2;
}

message KeyValuePair {
  // Mandatory field.
  //
  // The key.
  bytes key = 1;

  // Mandatory field.
  //
  // The value.
  bytes value = 2;
}

message StreamSnapshotResponse {
  // Mandatory field.
  KeyValuePair key_value = 1;
}

message ReadAsOfRequest {
  // Mandatory field.
  //
  // The ID of the state snapshot as of which to read the values.
  uint64 snapshot_id = 1;

  // List of keys for which the values should be returned.
  repeated bytes keys = 2;
}

message OptionalValue {
  optional bytes value = 1;
}

message ReadAsOfResponse {
  // The `values` list contains entries for all requested keys
  // in `ReadAsOfRequest.keys`, i.e. it is the exact same length.
  //
  // If a key-value has been deleted or has never been set,
  // `OptionalValue.value` will not be set. Otherwise, it will
  // be set to the value's bytes as of the requested state snapshot.
  repeated OptionalValue values = 1;
}
