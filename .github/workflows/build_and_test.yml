name: Build
on: [push, pull_request]
  # Trigger the workflow on push or pull request,
  # but only for the master branch
  # push:
  #     branches:
  #     - master
  # pull_request:
  #     branches:
  #     - master
env:
    DOCKER_REPO: concordbft
    DOCKER_IMAGE: concord-bft
    DOCKER_WORK_DIR: /concord-bft
    DOCKER_IMAGE_VER: 0.4
    CMAKE_CXX_FLAGS: "-DCMAKE_CXX_FLAGS_RELEASE=-O3 -g"
    USE_LOG4CPP: -DUSE_LOG4CPP=TRUE
    USE_ROCKSDB: -DBUILD_ROCKSDB_STORAGE=TRUE
    USE_CONAN: -DUSE_CONAN=OFF
    USE_S3_OBJECT_STORE: -DUSE_S3_OBJECT_STORE=OFF

jobs:
  build:
    name: Build
    runs-on: ubuntu-18.04
    strategy:
        fail-fast: false
        matrix:
            compiler:
                - "CC=gcc CXX=g++"
                - "CC=clang CXX=clang++"
            ci_build_type:
                - "-DCMAKE_BUILD_TYPE=RELEASE -DCI_TEST_STORAGE_TYPE=v1direct"
                - "-DCMAKE_BUILD_TYPE=RELEASE -DCI_TEST_STORAGE_TYPE=v2merkle"
                - "-DCMAKE_BUILD_TYPE=DEBUG -DCI_TEST_STORAGE_TYPE=v2merkle"
    steps:
        - name: Pull docker image
          run: docker pull ${{ env.DOCKER_REPO }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_VER }}
        - name: Checkout
          uses: actions/checkout@v2
        - name: Create artifact directory
          run: mkdir -p ${{ github.workspace }}/artifact
        - name: Configure core dump location
          run: |
            echo '/cores/core.%e.%p' | sudo tee /proc/sys/kernel/core_pattern
            mkdir -p ${{ github.workspace }}/artifact/cores/
            # Uncomment this is you want to login into the running session.
            # Please note that the build will block on this step.
            # Refer to https://github.com/marketplace/actions/debugging-with-tmate
            #- name: Setup tmate session
            #  uses: mxschmitt/action-tmate@v2
        - name: Build and test
          run: >
            docker run --rm --privileged=true
            --cap-add NET_ADMIN --cap-add=SYS_PTRACE --ulimit core=-1
            --workdir=${{ env.DOCKER_WORK_DIR }} --name=${{ env.DOCKER_IMAGE }}
            --mount type=bind,source=${PWD},target=${{ env.DOCKER_WORK_DIR }}
            --mount type=bind,source=${{ github.workspace }}/artifact/cores,target=/cores
            ${{ env.DOCKER_REPO }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_VER }}
            /bin/bash -c "mkdir build && cd build &&
            ${{ matrix.compiler }}
            cmake ${{ env.CMAKE_CXX_FLAGS }}
            ${{ matrix.ci_build_type }}
            ${{ env.USE_LOG4CPP }}
            ${{ env.USE_ROCKSDB }}
            ${{ env.USE_CONAN }}
            ${{ env.USE_S3_OBJECT_STORE }} .. &&
            make format-check &&
            make -j$(nproc) &&
            ctest --timeout 3000 --output-on-failure" 2>&1 | tee ${{ github.workspace }}/artifact/build.log ;
            exit ${PIPESTATUS[0]}
        - name: Prepare artifacts
          if: failure()
          run: |
            sudo chown -R $USER:$GROUP ${PWD}/build
            mv ${PWD}/build ${{ github.workspace }}/artifact/
            ls -lh ${{ github.workspace }}/artifact/cores
            sudo chown -R $USER:$GROUP ${{ github.workspace }}/artifact/
        - name: Upload artifacts
          uses: actions/upload-artifact@v2
          if: failure()
          with:
            name: artifacts-${{ matrix.compiler }}-${{ matrix.ci_build_type }}-${{ github.sha }}
            path: ${{ github.workspace }}/artifact/
