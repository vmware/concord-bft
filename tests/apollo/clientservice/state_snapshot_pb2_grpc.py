# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import state_snapshot_pb2 as state__snapshot__pb2


class StateSnapshotServiceStub(object):
    """The StateSnapshotService can be used to initialize an Application from a state
    snapshot visible to Concord Client. A state snapshot contains all key-values
    in the `STORAGE_SPACE_MERKLE` storage space from the start of the blockchain up
    to a specific point and is identified by a snapshot ID.

    A state snapshot contains only the last writes (as of the state snapshot itself)
    to key-values in the `STORAGE_SPACE_MERKLE` storage space and no prior historical
    writes.

    See `execution_engine.proto` for more information about storage spaces.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRecentSnapshot = channel.unary_unary(
                '/vmware.concord.client.statesnapshot.v1.StateSnapshotService/GetRecentSnapshot',
                request_serializer=state__snapshot__pb2.GetRecentSnapshotRequest.SerializeToString,
                response_deserializer=state__snapshot__pb2.GetRecentSnapshotResponse.FromString,
                )
        self.StreamSnapshot = channel.unary_stream(
                '/vmware.concord.client.statesnapshot.v1.StateSnapshotService/StreamSnapshot',
                request_serializer=state__snapshot__pb2.StreamSnapshotRequest.SerializeToString,
                response_deserializer=state__snapshot__pb2.StreamSnapshotResponse.FromString,
                )
        self.ReadAsOf = channel.unary_unary(
                '/vmware.concord.client.statesnapshot.v1.StateSnapshotService/ReadAsOf',
                request_serializer=state__snapshot__pb2.ReadAsOfRequest.SerializeToString,
                response_deserializer=state__snapshot__pb2.ReadAsOfResponse.FromString,
                )


class StateSnapshotServiceServicer(object):
    """The StateSnapshotService can be used to initialize an Application from a state
    snapshot visible to Concord Client. A state snapshot contains all key-values
    in the `STORAGE_SPACE_MERKLE` storage space from the start of the blockchain up
    to a specific point and is identified by a snapshot ID.

    A state snapshot contains only the last writes (as of the state snapshot itself)
    to key-values in the `STORAGE_SPACE_MERKLE` storage space and no prior historical
    writes.

    See `execution_engine.proto` for more information about storage spaces.
    """

    def GetRecentSnapshot(self, request, context):
        """Get the ID of a recent and available state snapshot.
        Errors:
        UNAVAILABLE: if Concord Client is not ready yet to process requests.
        UNKNOWN: exact cause is unknown.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamSnapshot(self, request, context):
        """Stream a specific state snapshot in a resumable fashion as a finite stream of key-values.
        Key-values are streamed with lexicographic order on keys.
        Errors:
        NOT_FOUND: if a state snapshot with the requested ID is not (or no longer) available.
        Applications are advised to retry initialization by fetching a new snapshot ID.
        INVALID_ARGUMENT: if resuming a stream using `last_received_key` and that key is not part of the
        state snapshot.
        UNAVAILABLE: if Concord Client is not ready yet to process requests.
        FAILED_PRECONDITION: if a precondition in Concord Client is not satisfied. For example,
        the state might be corrupted or invalid and, in that case, there
        would be no point in proceeding with streaming.
        UNKNOWN: exact cause is unknown.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadAsOf(self, request, context):
        """Read the values of the given keys as of a specific state snapshot.
        Errors:
        NOT_FOUND: if the state snapshot with the requested ID is not (or no longer) available.
        Applications are advised to retry initialization by fetching a new snapshot ID.
        UNAVAILABLE: if Concord Client is not ready yet to process requests.
        UNKNOWN: exact cause is unknown.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StateSnapshotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRecentSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecentSnapshot,
                    request_deserializer=state__snapshot__pb2.GetRecentSnapshotRequest.FromString,
                    response_serializer=state__snapshot__pb2.GetRecentSnapshotResponse.SerializeToString,
            ),
            'StreamSnapshot': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamSnapshot,
                    request_deserializer=state__snapshot__pb2.StreamSnapshotRequest.FromString,
                    response_serializer=state__snapshot__pb2.StreamSnapshotResponse.SerializeToString,
            ),
            'ReadAsOf': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadAsOf,
                    request_deserializer=state__snapshot__pb2.ReadAsOfRequest.FromString,
                    response_serializer=state__snapshot__pb2.ReadAsOfResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vmware.concord.client.statesnapshot.v1.StateSnapshotService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StateSnapshotService(object):
    """The StateSnapshotService can be used to initialize an Application from a state
    snapshot visible to Concord Client. A state snapshot contains all key-values
    in the `STORAGE_SPACE_MERKLE` storage space from the start of the blockchain up
    to a specific point and is identified by a snapshot ID.

    A state snapshot contains only the last writes (as of the state snapshot itself)
    to key-values in the `STORAGE_SPACE_MERKLE` storage space and no prior historical
    writes.

    See `execution_engine.proto` for more information about storage spaces.
    """

    @staticmethod
    def GetRecentSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vmware.concord.client.statesnapshot.v1.StateSnapshotService/GetRecentSnapshot',
            state__snapshot__pb2.GetRecentSnapshotRequest.SerializeToString,
            state__snapshot__pb2.GetRecentSnapshotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/vmware.concord.client.statesnapshot.v1.StateSnapshotService/StreamSnapshot',
            state__snapshot__pb2.StreamSnapshotRequest.SerializeToString,
            state__snapshot__pb2.StreamSnapshotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadAsOf(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vmware.concord.client.statesnapshot.v1.StateSnapshotService/ReadAsOf',
            state__snapshot__pb2.ReadAsOfRequest.SerializeToString,
            state__snapshot__pb2.ReadAsOfResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
