# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import request_pb2 as request__pb2


class RequestServiceStub(object):
    """Service error handling
    Each service method will return a gRPC status object.
    All errors are mapped to the common gRPC error codes defined here: https://grpc.github.io/grpc/core/md_doc_statuscodes.html
    See each method for concrete explanations below.

    The RequestService allows the caller to submit requests to the blockchain
    network, and receive the result of the request in a synchronous response.

    You can use the EventService below for asynchronously consuming the
    events of submitted requests.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Send = channel.unary_unary(
                '/vmware.concord.client.request.v1.RequestService/Send',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )


class RequestServiceServicer(object):
    """Service error handling
    Each service method will return a gRPC status object.
    All errors are mapped to the common gRPC error codes defined here: https://grpc.github.io/grpc/core/md_doc_statuscodes.html
    See each method for concrete explanations below.

    The RequestService allows the caller to submit requests to the blockchain
    network, and receive the result of the request in a synchronous response.

    You can use the EventService below for asynchronously consuming the
    events of submitted requests.
    """

    def Send(self, request, context):
        """Send a single request via the Concord Client to the blockchain network.
        Errors:
        DEADLINE_EXCEEDED: if the request couldn't be processed before the given timeout expired.
        INVALID_ARGUMENT: if a required field is not set.
        RESOURCE_EXHAUSTED: if Concord Client is overloaded. The caller should retry with a backoff.
        UNAVAILABLE: if Concord Client is currently unable to process any requests. The caller should retry with a backoff.
        ABORTED: if Concord has a contention between concurrently running requests or if execution engine has rejected requests. The caller should retry.
        INTERNAL: if Concord Client cannot progress independent of the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RequestServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Send': grpc.unary_unary_rpc_method_handler(
                    servicer.Send,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vmware.concord.client.request.v1.RequestService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RequestService(object):
    """Service error handling
    Each service method will return a gRPC status object.
    All errors are mapped to the common gRPC error codes defined here: https://grpc.github.io/grpc/core/md_doc_statuscodes.html
    See each method for concrete explanations below.

    The RequestService allows the caller to submit requests to the blockchain
    network, and receive the result of the request in a synchronous response.

    You can use the EventService below for asynchronously consuming the
    events of submitted requests.
    """

    @staticmethod
    def Send(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vmware.concord.client.request.v1.RequestService/Send',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
