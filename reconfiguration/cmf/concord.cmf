Msg WedgeCommand 3 {
  uint64 sender
  bool noop
}

Msg WedgeStatusRequest 5 {
	uint64 sender
	bool fullWedge
}

Msg WedgeStatusResponse 6 {
    bool stopped
}

Msg DownloadCommand 9 {
  string version
}

Msg DownloadStatusCommand 10 {
    string version
}

Msg DownloadStatus 11 {
    bool download_completed
    bool in_progress
}

Msg LatestPrunableBlockRequest 13 {
    uint64 sender
}

Msg LatestPrunableBlock 14 {
   uint64 replica
   uint64 block_id
   uint64 bft_sequence_number
   bytes signature
}

Msg PruneRequest 15 {
  uint64 sender
  list LatestPrunableBlock latest_prunable_block

  # TicksGenerator period in seconds.
  uint32 tick_period_seconds

  # The number of blocks in a pruning batch.
  uint64 batch_blocks_num
}

Msg PruneStatusRequest 17 {
    uint64 sender
}

Msg PruneStatus 18 {
    uint64 sender
    bool in_progress
    uint64 last_pruned_block
    string configuration_json
}

Msg GetVersionCommand 19 {
  bytes place_holder
}

Msg InstallCommand 20 {
    string version
    bool bft_support
}

Msg InstallStatusCommand 21 {
    optional string version
}

Msg InstallStatusResponse 22 {
    string version
    bool in_progress
    bool install_completed
}

Msg GetVersionResponse 23 {
  string version
}

Msg ReconfigurationErrorMsg 24 {
    string error_msg
}

Msg KeyExchangeCommand 25 {
    uint64 sender_id
    list uint64 target_replicas
    bool tls
}

Msg AddRemoveCommand 26 {
    string reconfiguration
}

Msg AddRemoveStatus 27 {
    uint64 sender_id
}

Msg AddRemoveStatusResponse 28 {
    string reconfiguration
}

Msg AddRemoveWithWedgeCommand 29 {
    string config_descriptor
    list kvpair uint64 string token
    bool bft_support
    bool restart
}

Msg AddRemoveWithWedgeStatus 30 {
    uint64 sender_id
}

Msg AddRemoveWithWedgeStatusResponse 31 {
    string config_descriptor
    bool wedge_status
    bool restart_flag
    bool bft_flag
}

Msg UnwedgeStatusRequest 32{
    uint64 sender
    bool bft_support
}

Msg UnwedgeStatusResponse 33{
    uint64 replica_id
    bool can_unwedge
    uint64 curr_epoch
    bytes signature
    string reason
}

Msg UnwedgeCommand 34{
    uint64 sender
    list kvpair uint64 UnwedgeStatusResponse unwedges
    bool bft_support
    bool restart
}
Msg ClientKeyExchangeCommand 35 {
    list uint64 target_clients
    bool tls
}

Msg ClientKeyExchangeCommandResponse 36 {
    uint64 block_id
}

Msg ClientReconfigurationStateRequest 37 {
    uint64 sender_id
    uint64 last_known_block
}

Msg ClientExchangePublicKey 38 {
    uint64 sender_id
    string pub_key
    list uint64 affected_clients
}

Msg ClientReconfigurationStateUpdate 40 {
    uint64 sender_id
}

Msg RestartCommand 42 {
    bool bft_support
    bool restart
    string data
}

Msg ClientsAddRemoveCommand 43 {
    string config_descriptor
    list kvpair uint64 string token
    bool restart
}

Msg ClientsAddRemoveStatusCommand 44 {
    uint64 sender_id
}

Msg ClientsAddRemoveStatusResponse 45 {
    list kvpair uint64 string clients_status
}

Msg ClientsAddRemoveUpdateCommand 46 {
    string config_descriptor
}

Msg ClientKeyExchangeStatus 47 {
    uint64 sender_id
    bool tls
}

Msg ClientKeyExchangeStatusResponse 48 {
     list kvpair uint32 string clients_data
     list kvpair uint32 uint64 timestamps
     bool tls
}

Msg ClientsAddRemoveExecuteCommand 51 {
    string config_descriptor
    string token
    bool restart
}

Msg ClientsRestartCommand 53 {
    uint64 sender_id
    string data
}
Msg ClientsRestartStatus 54 {
    uint64 sender_id
}

Msg ClientsRestartStatusResponse 55 {
    list kvpair uint32 uint64 timestamps
}
Msg ClientsRestartUpdate 56 {
    uint64 sender_id
}

Msg ReplicaTlsExchangeKey 57 {
    uint64 sender_id
    string cert
}

Msg ReplicaMainKeyUpdate 64 {
    uint64 sender_id
    string key
    string format
}

Msg LatestEpochData 75 {
}

Msg ClientStateReply 39 {
    uint64 block_id
    oneof {
        ClientExchangePublicKey
        ClientKeyExchangeCommand
        ClientsAddRemoveExecuteCommand
        ClientsAddRemoveUpdateCommand
        ClientsRestartCommand
        ReplicaTlsExchangeKey
        LatestEpochData
        ReplicaMainKeyUpdate
      } response
    uint64 epoch
}

Msg ClientReconfigurationStateReply 49 {
    list ClientStateReply states
}

Msg DbCheckpointInfo 58 {
    uint64 seq_num
    uint64 block_id
    uint64 timestamp
}

Msg GetDbCheckpointInfoRequest 59 {
    uint64 sender_id
}

Msg GetDbCheckpointInfoStatusResponse 62 {
    list DbCheckpointInfo db_checkpoint_info
}

Msg CreateDbCheckpointCommand 63 {
    uint64 sender_id
}

# Sent by Clientservice to the replicas to request a DB snapshot.
Msg StateSnapshotRequest 65 {
  # Checkpoint the state every `checkpoint_kv_count` key-value pairs.
  # Note: Ignored in this version of the protocol as it only supports state snapshot
  # for new participant IDs (meaning we will only stream a relatively small amount of public state
  # and, therefore, we don't need multiple checkpoints).
  uint64 checkpoint_kv_count

  # The participant ID that requested a snapshot.
  string participant_id
}

Msg StateSnapshotData 66 {
  # Unique identifier of the DB snapshot.
  uint64 snapshot_id

  # The event group ID at which the state snapshot with `snapshot_id` was taken.
  uint64 event_group_id

  # An estimate (with reasonable accuracy) of the count of key-values contained
  # in the state snapshot. Please note that this is an estimation and *not* the
  # actual count.
  uint64 key_value_count_estimate
}

# The response to a `StateSnapshotRequest`. Sent by the replicas to Clientservice.
Msg StateSnapshotResponse 67 {
  # If `data` is not set, it means that state snapshot is being created at the moment.
  # The user is required to retry the request after some *random* amount of time has elapsed.
  optional StateSnapshotData data
}

# Sent by Clientservice to request the signed hash of the public state at `snapshot_id`.
Msg SignedPublicStateHashRequest 68 {
  # Unique identifier of the DB snapshot at which the signed public state hash is requested.
  uint64 snapshot_id

  # The participant ID that requested the signed public state hash.
  string participant_id
}

Msg SignedPublicStateHashData 69 {
  # The ID of the snapshot for which the signed public state hash was requested.
  uint64 snapshot_id

  # The ID of the responding replica.
  uint64 replica_id

  # The block ID at which the public state hash is computed.
  uint64 block_id

  # The SHA3-256 hash of the public state at `snapshot_id`.
  fixedlist uint8 32 hash
}

# Represents the status of a snapshot-related response.
Enum SnapshotResponseStatus {
  # Successful response.
  Success,

  # The snapshot with the given ID is valid, but is still pending creation.
  # Clientservice is advised to retry.
  SnapshotPending,

  # A snapshot with the given ID is non-existent.
  # Clientservice must request a new snapshot ID.
  SnapshotNonExistent,

  # An internal error has occurred. Clientservice might either retry
  # or request a new snapshot ID.
  InternalError
}

# Returned as replica-specific-information (RSI).
Msg SignedPublicStateHashResponse 70 {
  # The status of the response.
  # Note that `data` and `signature` are only relevant if status is `Success`.
  SnapshotResponseStatus status

  # The public state hash data.
  SignedPublicStateHashData data

  # An RSA signature from the responding replica on the serialization of `data`.
  bytes signature
}

Msg StateSnapshotReadAsOfRequest 71 {
  # The ID of the state snapshot as of which to read the values.
  uint64 snapshot_id

  # The participant ID that requested the values.
  string participant_id

  # List of keys for which the values should be returned.
  list string keys
}

Msg StateSnapshotReadAsOfResponse 72 {
  # The status of the response.
  # Note that `values` is only relevant if status is `Success`.
  SnapshotResponseStatus status

  # The `values` list contains entries for *all* requested keys
  # in `StateSnapshotReadAsOfRequest.keys` in the exact same order. `values`
  # is, therefore, the exact same length as `StateSnapshotReadAsOfRequest.keys`.
  #
  # If a key-value is either:
  #  * deleted
  #  * never set
  #  * non-public (TODO: will be removed when we support streaming of non-public state),
  # the value will not be set. Otherwise, it will
  # be set to the value's bytes as of the requested state snapshot.
  list optional string values
}

Msg PruneConfigurationMax 73 {
    uint32 dbMaxRate
    uint32 consensusEngineMaxRate
}

Msg PruneConfigurationMap 74 {
   list kvpair uint64 uint64 mapConsensusRateToPruningRate
}

Msg PruneSwitchModeRequest 75 {
    uint64 sender_id
    uint8 mode
    oneof {
        PruneConfigurationMap
        PruneConfigurationMax
    }
    configuration
}

Msg PruneTicksChangeRequest 76 {
    uint64 sender_id
    # TicksGenerator period in seconds.
    uint32 tick_period_seconds

    # The number of blocks in a pruning batch.
    uint64 batch_blocks_num
}

Msg PruneStopRequest 77 {
    uint64 sender_id
}

Msg ReconfigurationRequest 1 {
  uint64 sender
  bytes signature
  oneof {
    WedgeCommand
    WedgeStatusRequest
    GetVersionCommand
    DownloadCommand
    DownloadStatusCommand
    LatestPrunableBlockRequest
    PruneRequest
    PruneStatusRequest
    PruneTicksChangeRequest
    InstallCommand
    InstallStatusCommand
    KeyExchangeCommand
    AddRemoveCommand
    AddRemoveStatus
    AddRemoveWithWedgeCommand
    AddRemoveWithWedgeStatus
    UnwedgeStatusRequest
    UnwedgeCommand
    ClientKeyExchangeCommand
    ClientReconfigurationStateRequest
    ClientExchangePublicKey
    RestartCommand
    ReplicaTlsExchangeKey
    ClientsAddRemoveCommand
    ClientsAddRemoveStatusCommand
    ClientsAddRemoveUpdateCommand
    ClientKeyExchangeStatus
    ClientsRestartCommand
    ClientsRestartStatus
    ClientsRestartUpdate
    PruneSwitchModeRequest
    PruneStopRequest
    GetDbCheckpointInfoRequest
    CreateDbCheckpointCommand
    ReplicaMainKeyUpdate
    StateSnapshotRequest
    SignedPublicStateHashRequest
    StateSnapshotReadAsOfRequest
  } command
  bytes additional_data
}

Msg ReconfigurationResponse 2 {
  bool success
  oneof {
    WedgeStatusResponse
    LatestPrunableBlock
    PruneStatus
    DownloadStatus
    InstallStatusResponse
    GetVersionResponse
    ReconfigurationErrorMsg
    AddRemoveStatusResponse
    AddRemoveWithWedgeStatusResponse
    UnwedgeStatusResponse
    ClientReconfigurationStateReply
    ClientKeyExchangeCommandResponse
    ClientsAddRemoveStatusResponse
    ClientKeyExchangeStatusResponse
    ClientsRestartStatusResponse
    GetDbCheckpointInfoStatusResponse
    StateSnapshotResponse
    SignedPublicStateHashResponse
    StateSnapshotReadAsOfResponse
  } response
  bytes additional_data
}
